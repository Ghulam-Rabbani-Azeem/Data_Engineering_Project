pipeline GTFSDataProcessingPipeline {

  // Download data from the specified URL
  GTFSDataDownloader
    -> GTFSArchiveProcessor;

  // Process the downloaded zip file archive
  GTFSArchiveProcessor
    -> GTFSFileSelector
    -> GTFSTextProcessor
    -> GTFSCsvProcessor
    -> GTFSTableProcessor
    -> GTFSSQLiteWriter;

  block GTFSDataDownloader oftype HttpExtractor {
      url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip";
  }

  block GTFSArchiveProcessor oftype ArchiveInterpreter {
    archiveType: "zip";
  }

  block GTFSFileSelector oftype FilePicker {
    path: "./stops.txt";
  }

  block GTFSTextProcessor oftype TextFileInterpreter {  
    encoding: "utf8"; 
  }

  block GTFSCsvProcessor oftype CSVInterpreter { 
    delimiter: ",";
    enclosing: '"';
  }

  valuetype ZoneIDType oftype integer {
    constraints: [ ValidZoneId ];
  } 

  block GTFSTableProcessor oftype TableInterpreter {
    header: true; // csv includes a header row
    columns: [
      "stop_id" oftype integer, 
      "stop_name" oftype text, 
      "stop_lat" oftype GeoCoordinatesType,
      "stop_lon" oftype GeoCoordinatesType,
      "zone_id" oftype ZoneIDType
    ]; // define column structure
  }

  constraint GeoCoordinatesRange oftype RangeConstraint {
    lowerBound: -90;
    upperBound: 90;
    lowerBoundInclusive: true;
    upperBoundInclusive: true;
  }

  valuetype GeoCoordinatesType oftype decimal {
    constraints: [GeoCoordinatesRange];
  }

  constraint ValidZoneId on integer: value == 1925;

  block GTFSSQLiteWriter oftype SQLiteLoader {
    table: "stops";
    file: "./gtfs.sqlite";
  }
}
