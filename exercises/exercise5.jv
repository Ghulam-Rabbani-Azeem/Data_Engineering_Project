pipeline GTFSDataProcessingPipeline {

  // download data from the specified URL
  DataRetriever
    -> ArchiveHandler;

  // Process the downloaded zip file archive
  ArchiveHandler
    -> TargetFilePicker
    -> EncodingHandler
    -> CSVHandler
    -> DataFilter
    -> SchemaMapper
    -> DatabaseLoader;

  block DataRetriever oftype HttpExtractor {
      url: "https://gtfs.rhoenenergie-bus.de/GTFS.zip";
  }

  block ArchiveHandler oftype ArchiveInterpreter {
    archiveType: "zip";
  }

  block TargetFilePicker oftype FilePicker {
    path: "./stops.txt";
  }

  block EncodingHandler oftype TextFileInterpreter {  
    encoding: "utf8"; 
  }

  block CSVHandler oftype CSVInterpreter { 
    delimiter: ",";
    enclosing: '"';
  }

  block DataFilter oftype RowFilter {
    conditions: [
      "zone_id == 1925",
      "stop_name.is_text_with_german_umlauts()",
      "stop_lat >= -90 && stop_lat <= 90",
      "stop_lon >= -90 && stop_lon <= 90"
    ];
  }

  valuetype ZoneIDType oftype integer {
    constraints: [ ValidZoneId ];
  } 

  block SchemaMapper oftype TableInterpreter {
    header: true; // csv includes a header row
    columns: [
      "stop_id" oftype BIGINT, 
      "stop_name" oftype TEXT, 
      "stop_lat" oftype FLOAT,
      "stop_lon" oftype FLOAT,
      "zone_id" oftype BIGINT
    ]; // define column structure
  }

  constraint GeoCoordinatesRange oftype RangeConstraint {
    lowerBound: -90;
    upperBound: 90;
    lowerBoundInclusive: true;
    upperBoundInclusive: true;
  }

  valuetype GeoCoordinatesType oftype decimal {
    constraints: [GeoCoordinatesRange];
  }

  constraint ValidZoneId on integer: value == 1925;

  block DatabaseLoader oftype SQLiteLoader {
    table: "stops";
    file: "./gtfs.sqlite";
  }
}
